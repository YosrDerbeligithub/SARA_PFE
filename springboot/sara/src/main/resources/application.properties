spring.application.name=SARA

# ================================
# Server Configuration
# ================================
server.port=8081




# ========================
# Database Configuration
# ========================
spring.datasource.url=jdbc:postgresql://db:5432/sara
spring.datasource.username=postgres
spring.datasource.password=melik1234
spring.datasource.driver-class-name=org.postgresql.Driver

# ========================
# JPA/Hibernate Settings
# ========================
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
Optional: Show SQL in logs for debugging



# JWT Configuration
app.jwt.secret=FpBbEwbtgaBmYZV-iKHilvzUfnr6-pHg_cM81C70i2BxB9nriGtHQSiE8-OIGYY7gptNffdjgz56HxeHk_TGFQ
app.jwt.accessExpirationMs=900000 
# 15 minutes
app.jwt.refreshExpirationDays=7






# ================================
# Keycloak Resource Server Configuration
# (Used to validate incoming JWT tokens)
# Replace with your actual Keycloak server URL and realm.
# ================================
#spring.security.oauth2.resourceserver.jwt.issuer-uri=https://keycloak.example.com/auth/realms/your-realm

# ================================
# OAuth2 Client Configuration (Optional)
# (For outbound calls requiring token refresh)
# Uncomment and fill these if your gateway needs to act as an OAuth2 client.
#spring.security.oauth2.client.registration.myclient.client-id=your-client-id
#spring.security.oauth2.client.registration.myclient.client-secret=your-client-secret
#spring.security.oauth2.client.registration.myclient.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.myclient.scope=openid,profile,email
#spring.security.oauth2.client.provider.myprovider.issuer-uri=https://keycloak.example.com/auth/realms/your-realm

# ================================
# Historical Processing Microservice URL
# (Used by the service layer to forward historical processing requests)
# In Docker Compose, you can use the service name as hostname.
# ================================
#historical.processing.url= # Empty default (will be overridden by Docker env var)

# ================================
# Logging Configuration
# ================================
logging.level.org.springframework=INFO
logging.level.com.example.demo=DEBUG
logging.level.root=DEBUG
logging.level.com.example.sara=TRACE
logging.level.org.springframework.web=TRACE
logging.level.reactor.netty.http.client=DEBUG
# ================================
# Additional Application Settings (if any)
# ================================
# (These can be used in your custom Settings class if needed)
# For example, if you want to override the API key for development:
# api.key=your-secure-key-here 

spring.data.redis.host=${SPRING_REDIS_HOST}
spring.data.redis.port=${SPRING_REDIS_PORT}
spring.data.redis.password=${SPRING_REDIS_PASSWORD}
historical.processing.url=${HISTORICAL_PROCESSING_URL:http://localhost:5000}
